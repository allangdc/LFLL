/*
The MIT License (MIT)

Copyright (c) 2013 Nicolas Pauss

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
#ifndef LFLLTUPLEDETAIL_H
#define LFLLTUPLEDETAIL_H

/**
 * This file is automatically generated by python/LFLLTupleGenerator.py
 * You shouldn't use this file directly but rather use lfll/LFLLTuple.h.
 */


#include <cstring>

#include <lfll/LFLLStaticAssert.h>

namespace detail {
class null_type {};

template<class T> struct isNonNullType { enum {value = true}; };
template<> struct isNonNullType<null_type> { enum {value = false}; };
}

template <class T0 = detail::null_type, class T1 = detail::null_type, class T2 = detail::null_type, class T3 = detail::null_type, class T4 = detail::null_type, class T5 = detail::null_type, class T6 = detail::null_type, class T7 = detail::null_type, class T8 = detail::null_type, class T9 = detail::null_type, class T10 = detail::null_type, class T11 = detail::null_type, class T12 = detail::null_type, class T13 = detail::null_type, class T14 = detail::null_type, class T15 = detail::null_type, class T16 = detail::null_type, class T17 = detail::null_type, class T18 = detail::null_type, class T19 = detail::null_type, class T20 = detail::null_type, class T21 = detail::null_type, class T22 = detail::null_type, class T23 = detail::null_type, class T24 = detail::null_type, class T25 = detail::null_type, class T26 = detail::null_type, class T27 = detail::null_type, class T28 = detail::null_type, class T29 = detail::null_type, class T30 = detail::null_type, class T31 = detail::null_type, class T32 = detail::null_type, class T33 = detail::null_type, class T34 = detail::null_type, class T35 = detail::null_type, class T36 = detail::null_type, class T37 = detail::null_type, class T38 = detail::null_type, class T39 = detail::null_type, class T40 = detail::null_type, class T41 = detail::null_type, class T42 = detail::null_type, class T43 = detail::null_type, class T44 = detail::null_type, class T45 = detail::null_type, class T46 = detail::null_type, class T47 = detail::null_type, class T48 = detail::null_type, class T49 = detail::null_type>
class LFLLTuple;


namespace detail {


// LFLLTupleValueTypes, retrieve type of the value of the nth element.

template <size_t I, class T0 = null_type, class T1 = null_type, class T2 = null_type, class T3 = null_type, class T4 = null_type, class T5 = null_type, class T6 = null_type, class T7 = null_type, class T8 = null_type, class T9 = null_type, class T10 = null_type, class T11 = null_type, class T12 = null_type, class T13 = null_type, class T14 = null_type, class T15 = null_type, class T16 = null_type, class T17 = null_type, class T18 = null_type, class T19 = null_type, class T20 = null_type, class T21 = null_type, class T22 = null_type, class T23 = null_type, class T24 = null_type, class T25 = null_type, class T26 = null_type, class T27 = null_type, class T28 = null_type, class T29 = null_type, class T30 = null_type, class T31 = null_type, class T32 = null_type, class T33 = null_type, class T34 = null_type, class T35 = null_type, class T36 = null_type, class T37 = null_type, class T38 = null_type, class T39 = null_type, class T40 = null_type, class T41 = null_type, class T42 = null_type, class T43 = null_type, class T44 = null_type, class T45 = null_type, class T46 = null_type, class T47 = null_type, class T48 = null_type, class T49 = null_type>
class LFLLTupleValueTypes
{
public:
    typedef typename LFLLTupleValueTypes<I-1, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, null_type>::type
        type;
};


template <class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22, class T23, class T24, class T25, class T26, class T27, class T28, class T29, class T30, class T31, class T32, class T33, class T34, class T35, class T36, class T37, class T38, class T39, class T40, class T41, class T42, class T43, class T44, class T45, class T46, class T47, class T48, class T49>
class LFLLTupleValueTypes<0, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>
{
    LFLL_STATIC_ASSERT((isNonNullType<T0>::value), non_accessible_element);
public:
    typedef T0 type;
};


// LFLLTupleElement

template <size_t I, class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22, class T23, class T24, class T25, class T26, class T27, class T28, class T29, class T30, class T31, class T32, class T33, class T34, class T35, class T36, class T37, class T38, class T39, class T40, class T41, class T42, class T43, class T44, class T45, class T46, class T47, class T48, class T49>
class LFLLTupleElement : public LFLLTupleElement<I+1, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, null_type>
{
public:
    static const size_t tupleSize = 1 + LFLLTupleElement<I+1, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, null_type>::tupleSize;
public:
    LFLLTupleElement(T0* v0, T1* v1, T2* v2, T3* v3, T4* v4, T5* v5, T6* v6, T7* v7, T8* v8, T9* v9, T10* v10, T11* v11, T12* v12, T13* v13, T14* v14, T15* v15, T16* v16, T17* v17, T18* v18, T19* v19, T20* v20, T21* v21, T22* v22, T23* v23, T24* v24, T25* v25, T26* v26, T27* v27, T28* v28, T29* v29, T30* v30, T31* v31, T32* v32, T33* v33, T34* v34, T35* v35, T36* v36, T37* v37, T38* v38, T39* v39, T40* v40, T41* v41, T42* v42, T43* v43, T44* v44, T45* v45, T46* v46, T47* v47, T48* v48, T49* v49)
        : LFLLTupleElement<I+1, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, null_type>(
              v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, 0)
        , m_val(v0)
    {}

    T0* get()
    {
        return m_val;
    }

    const T0* get() const
    {
        return m_val;
    }

private:
    T0* m_val;
};

template <size_t I, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22, class T23, class T24, class T25, class T26, class T27, class T28, class T29, class T30, class T31, class T32, class T33, class T34, class T35, class T36, class T37, class T38, class T39, class T40, class T41, class T42, class T43, class T44, class T45, class T46, class T47, class T48, class T49>
class LFLLTupleElement<I, null_type, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>
{
public:
    static const size_t tupleSize = 0;
public:
    LFLLTupleElement(null_type*, T1*, T2*, T3*, T4*, T5*, T6*, T7*, T8*, T9*, T10*, T11*, T12*, T13*, T14*, T15*, T16*, T17*, T18*, T19*, T20*, T21*, T22*, T23*, T24*, T25*, T26*, T27*, T28*, T29*, T30*, T31*, T32*, T33*, T34*, T35*, T36*, T37*, T38*, T39*, T40*, T41*, T42*, T43*, T44*, T45*, T46*, T47*, T48*, T49*)
    {}
};

// LFLLTupleElementTypes, retrieve type of the nth element.

template <size_t I, size_t EI, class T0 = null_type, class T1 = null_type, class T2 = null_type, class T3 = null_type, class T4 = null_type, class T5 = null_type, class T6 = null_type, class T7 = null_type, class T8 = null_type, class T9 = null_type, class T10 = null_type, class T11 = null_type, class T12 = null_type, class T13 = null_type, class T14 = null_type, class T15 = null_type, class T16 = null_type, class T17 = null_type, class T18 = null_type, class T19 = null_type, class T20 = null_type, class T21 = null_type, class T22 = null_type, class T23 = null_type, class T24 = null_type, class T25 = null_type, class T26 = null_type, class T27 = null_type, class T28 = null_type, class T29 = null_type, class T30 = null_type, class T31 = null_type, class T32 = null_type, class T33 = null_type, class T34 = null_type, class T35 = null_type, class T36 = null_type, class T37 = null_type, class T38 = null_type, class T39 = null_type, class T40 = null_type, class T41 = null_type, class T42 = null_type, class T43 = null_type, class T44 = null_type, class T45 = null_type, class T46 = null_type, class T47 = null_type, class T48 = null_type, class T49 = null_type>
class LFLLTupleElementTypes
{
public:
    typedef typename LFLLTupleElementTypes<I-1, EI, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, null_type>::type
        type;
};

template <size_t EI, class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22, class T23, class T24, class T25, class T26, class T27, class T28, class T29, class T30, class T31, class T32, class T33, class T34, class T35, class T36, class T37, class T38, class T39, class T40, class T41, class T42, class T43, class T44, class T45, class T46, class T47, class T48, class T49>
class LFLLTupleElementTypes<0, EI, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>
{
    LFLL_STATIC_ASSERT((isNonNullType<T0>::value), non_accessible_element);
public:
    typedef LFLLTupleElement<EI, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> type;
};



// LFLLTupleImpl

template <class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22, class T23, class T24, class T25, class T26, class T27, class T28, class T29, class T30, class T31, class T32, class T33, class T34, class T35, class T36, class T37, class T38, class T39, class T40, class T41, class T42, class T43, class T44, class T45, class T46, class T47, class T48, class T49>
class LFLLTupleImpl : public LFLLTupleElement<0, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>
{
public:
    static const size_t tupleSize = LFLLTupleElement<0, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>::tupleSize;

public:
    LFLLTupleImpl(T0* v0, T1* v1, T2* v2, T3* v3, T4* v4, T5* v5, T6* v6, T7* v7, T8* v8, T9* v9, T10* v10, T11* v11, T12* v12, T13* v13, T14* v14, T15* v15, T16* v16, T17* v17, T18* v18, T19* v19, T20* v20, T21* v21, T22* v22, T23* v23, T24* v24, T25* v25, T26* v26, T27* v27, T28* v28, T29* v29, T30* v30, T31* v31, T32* v32, T33* v33, T34* v34, T35* v35, T36* v36, T37* v37, T38* v38, T39* v39, T40* v40, T41* v41, T42* v42, T43* v43, T44* v44, T45* v45, T46* v46, T47* v47, T48* v48, T49* v49)
        : LFLLTupleElement<0, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> (
            v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49)
    {}
};

}

#endif // LFLLTUPLEDETAIL_H

